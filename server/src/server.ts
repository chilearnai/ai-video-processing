const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const ffmpeg = require('fluent-ffmpeg');
const { OpenAI } = require('openai');
const { transcribeWithTimestamps } = require('./utils/helpers'); // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Whisper

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
const app = express();
const upload = multer({ dest: 'uploads/' });

// OpenAI API
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á OpenAI
});

interface PauseSegment {
    start: number;
    end: number;
}

interface TranscriptSegment {
    start: number;
    end: number;
    text: string;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
app.post('/process-video', upload.single('video'), async (req: any, res: any) => {
    const videoPath = req.file?.path;
    const audioPath = videoPath + '.wav';

    try {
        // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await extractAudio(videoPath, audioPath);

        // 2. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏
        const transcript = await transcribeWithTimestamps(audioPath);

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ ChatGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—É–∑
        const pauses = await detectPausesWithChatGPT(transcript);

        // 4. –£–¥–∞–ª—è–µ–º –ø–∞—É–∑—ã –∏–∑ –≤–∏–¥–µ–æ
        const outputPath = 'outputs/' + path.basename(videoPath) + '_cut.mp4';
        await cutPausesFromVideo(videoPath, pauses, outputPath);

        res.download(outputPath);
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ');
    } finally {
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        fs.unlinkSync(videoPath);
        fs.unlinkSync(audioPath);
    }
});

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
function extractAudio(videoPath: string, audioPath: string): Promise<void> {
    return new Promise((resolve, reject) => {
        ffmpeg(videoPath)
            .noVideo()
            .audioCodec('pcm_s16le')
            .audioChannels(1)
            .audioFrequency(16000)
            .save(audioPath)
            .on('end', resolve)
            .on('error', reject);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—É–∑ –∏–∑ –≤–∏–¥–µ–æ
function cutPausesFromVideo(videoPath: string, pauses: PauseSegment[], outputPath: string): Promise<void> {
    return new Promise((resolve, reject) => {
        const segments: { start: number; end?: number }[] = [];
        let lastEnd = 0;

        for (const pause of pauses) {
            segments.push({ start: lastEnd, end: pause.start });
            lastEnd = pause.end;
        }
        segments.push({ start: lastEnd });

        const filters = segments.map((seg, i) => {
            return `[0:v]trim=start=${seg.start}${seg.end ? `:end=${seg.end}` : ''},setpts=PTS-STARTPTS[v${i}];` +
                `[0:a]atrim=start=${seg.start}${seg.end ? `:end=${seg.end}` : ''},asetpts=PTS-STARTPTS[a${i}]`;
        }).join('');

        const concatInputs = segments.map((_, i) => `[v${i}][a${i}]`).join('');
        const concatFilter = `${concatInputs}concat=n=${segments.length}:v=1:a=1[outv][outa]`;

        ffmpeg(videoPath)
            .complexFilter(filters + ';' + concatFilter, ['outv', 'outa'])
            .outputOptions('-map', '[outv]', '-map', '[outa]')
            .save(outputPath)
            .on('end', resolve)
            .on('error', reject);
    });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—É–∑ —Å –ø–æ–º–æ—â—å—é ChatGPT
async function detectPausesWithChatGPT(transcript: TranscriptSegment[]): Promise<PauseSegment[]> {
    const prompt = `
    –£–¥–∞–ª–∏ –≤—Å–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –∏–∑ –≤–∏–¥–µ–æ. –£—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Å–µ–≥–º–µ–Ω—Ç—ã –±–µ–∑ —Ä–µ—á–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 1.5 —Å–µ–∫—É–Ω–¥.
    –í–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ —Ç–∞–π–º–∫–æ–¥–æ–≤ –ø–∞—É–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [{ start: 12.5, end: 14.3 }, ...]
    –í–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ—á–∏ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏:
    ${JSON.stringify(transcript)}
  `;

    const res = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
    });

    const json = res.choices[0].message.content ?? '[]';
    return JSON.parse(json);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, () => {
    console.log('üöÄ Server started on http://localhost:3000');
});